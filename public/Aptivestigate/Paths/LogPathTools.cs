//
// Aptivestigate  Copyright (C) 2024-2025  Aptivi
//
// This file is part of Aptivestigate
//
// Aptivestigate is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aptivestigate is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY, without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

using Aptivestigate.Languages;
using SpecProbe.Software.Platform;
using System;
using System.IO;
using System.Reflection;

namespace Aptivestigate.Paths
{
    /// <summary>
    /// Log path tools
    /// </summary>
    public static class LogPathTools
    {
        /// <summary>
        /// Gets the logs directory according to a specified type
        /// </summary>
        /// <param name="path">Log path type</param>
        /// <returns>A path that points to the application log directory, depending on the <see cref="LogPath"/></returns>
        public static string GetPath(LogPath path)
        {
            if (path < 0 || path >= (LogPath)Enum.GetNames(typeof(LogPath)).Length)
                throw new ArgumentException(LanguageTools.GetLocalized("APTIVESTIGATE_LOGPATH_EXCEPTION_PATHNOTFOUND"), nameof(path));
            return GetPath(path.ToString());
        }

        /// <summary>
        /// Gets the log files that were generated by a specified assembly
        /// </summary>
        /// <param name="path">Log path</param>
        /// <param name="assembly">Assembly</param>
        /// <returns>An array of log file paths</returns>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        public static string[] GetLogFiles(LogPath path, Assembly? assembly)
        {
            if (assembly is null)
                throw new ArgumentNullException(nameof(assembly), LanguageTools.GetLocalized("APTIVESTIGATE_LOGPATH_EXCEPTION_ASMNEEDED"));
            if (path < 0 || path >= (LogPath)Enum.GetNames(typeof(LogPath)).Length)
                throw new ArgumentException(LanguageTools.GetLocalized("APTIVESTIGATE_LOGPATH_EXCEPTION_PATHNOTFOUND"), nameof(path));
            return GetLogFiles(path, assembly.GetName().Name);
        }

        /// <summary>
        /// Gets the log files that were generated by a specified assembly
        /// </summary>
        /// <param name="path">Log path</param>
        /// <param name="assemblyName">Assembly name</param>
        /// <returns>An array of log file paths</returns>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        public static string[] GetLogFiles(LogPath path, string assemblyName)
        {
            if (string.IsNullOrEmpty(assemblyName))
                throw new ArgumentNullException(nameof(assemblyName), LanguageTools.GetLocalized("APTIVESTIGATE_LOGPATH_EXCEPTION_ASMNEEDED"));
            if (path < 0 || path >= (LogPath)Enum.GetNames(typeof(LogPath)).Length)
                throw new ArgumentException(LanguageTools.GetLocalized("APTIVESTIGATE_LOGPATH_EXCEPTION_PATHNOTFOUND"), nameof(path));

            // Get the required path and filter the log files
            string prefix = GetPrefix(path);
            string folder = GetPath(path);
            var files = Directory.GetFiles(folder, $"*{prefix}{assemblyName}_*_*.txt") ?? [];
            return files;
        }

        private static string GetPath(string folderName)
        {
            string path =
                PlatformHelper.IsOnWindows() ?
                $"{Environment.GetEnvironmentVariable("LOCALAPPDATA")}\\Aptivi\\{folderName}" :
                $"{Environment.GetEnvironmentVariable("HOME")}/.config/Aptivi/{folderName}";
            return path;
        }

        private static string GetPrefix(LogPath path)
        {
            return path switch
            {
                LogPath.Logs => "log_",
                LogPath.Crashes => "crash_",
                _ => throw new ArgumentException(LanguageTools.GetLocalized("APTIVESTIGATE_LOGPATH_EXCEPTION_PATHNOTFOUND"), nameof(path)),
            };
        }
    }
}
